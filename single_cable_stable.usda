#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (500, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (2.509777569738944, 311.1916558413285, 215.55762811719663)
                double3 target = (7.680653320208609, -20.264854865254108, 142.56136328331405)
            }
            dictionary Right = {
                double3 position = (0, -500, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 500)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./single_cable.usd"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    defaultPrim = "vechicle"
    endTimeCode = 1000
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 120
    upAxis = "Z"
)

def Xform "vechicle"
{
    custom string cmd_path = ""

    def PhysicsScene "physicsScene" (
        prepend apiSchemas = ["PhysxSceneAPI"]
    )
    {
        vector3f physics:gravityDirection = (0, 0, -1)
        float physics:gravityMagnitude = 981
        uniform uint physxScene:minPositionIterationCount = 200
        uniform uint physxScene:minVelocityIterationCount = 200
        uint physxScene:timeStepsPerSecond = 60
    }

    def Material "PhysicsMaterial" (
        prepend apiSchemas = ["PhysicsMaterialAPI"]
    )
    {
        float physics:dynamicFriction = 0.5
        float physics:restitution = 0
        float physics:staticFriction = 0.5
    }

    def Xform "Table"
    {
        def Cube "tableTopActor" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding:physics = </vechicle/PhysicsMaterial>
            token physxCollision:bodyType = "static"
            color3f[] primvars:displayColor = [(0.66, 0.56, 0.47)]
            float[] primvars:displayOpacity = [1]
            double size = 1
            float3 xformOp:scale = (230, 130, 1)
            double3 xformOp:translate = (0, 0, 200.51)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }

        def Cube "tableLeg0Actor" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding:physics = </vechicle/PhysicsMaterial>
            token physxCollision:bodyType = "static"
            color3f[] primvars:displayColor = [(0.66, 0.56, 0.47)]
            double size = 1
            float3 xformOp:scale = (20, 20, 200)
            double3 xformOp:translate = (-100, -50, 100)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }

        def Cube "tableLeg1Actor" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding:physics = </vechicle/PhysicsMaterial>
            token physxCollision:bodyType = "static"
            color3f[] primvars:displayColor = [(0.66, 0.56, 0.47)]
            double size = 1
            float3 xformOp:scale = (20, 20, 200)
            double3 xformOp:translate = (-100, 50, 100)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }

        def Cube "tableLeg2Actor" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding:physics = </vechicle/PhysicsMaterial>
            token physxCollision:bodyType = "static"
            color3f[] primvars:displayColor = [(0.66, 0.56, 0.47)]
            double size = 1
            float3 xformOp:scale = (20, 20, 200)
            double3 xformOp:translate = (100, -50, 100)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }

        def Cube "tableLeg3Actor" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding:physics = </vechicle/PhysicsMaterial>
            token physxCollision:bodyType = "static"
            color3f[] primvars:displayColor = [(0.66, 0.56, 0.47)]
            double size = 1
            float3 xformOp:scale = (20, 20, 200)
            double3 xformOp:translate = (100, 50, 100)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }

        def PhysxPhysicsJointInstancer "TablejointInstancer0"
        {
            int[] physics:body0Indices = [0]
            rel physics:body0s = </vechicle/Table/tableLeg0Actor>
            int[] physics:body1Indices = [0]
            prepend rel physics:body1s = </vechicle/Table/tableTopActor>
            point3f[] physics:localPos0s = [(0, 0, 100)]
            point3f[] physics:localPos1s = [(-100, -50, -0.5)]
            quath[] physics:localRot0s = [(1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0)]
            int[] physics:protoIndices = [0]
            prepend rel physics:prototypes = </vechicle/Rope0/ropeTableAttachment/fixedJoint>

            def PhysicsFixedJoint "fixedJoint"
            {
            }
        }

        def PhysxPhysicsJointInstancer "TablejointInstancer1"
        {
            int[] physics:body0Indices = [0]
            rel physics:body0s = </vechicle/Table/tableLeg1Actor>
            int[] physics:body1Indices = [0]
            prepend rel physics:body1s = </vechicle/Table/tableTopActor>
            point3f[] physics:localPos0s = [(0, 0, 100)]
            point3f[] physics:localPos1s = [(-100, 50, -0.5)]
            quath[] physics:localRot0s = [(1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0)]
            int[] physics:protoIndices = [0]
            prepend rel physics:prototypes = </vechicle/Rope0/ropeTableAttachment/fixedJoint>

            def PhysicsFixedJoint "fixedJoint"
            {
            }
        }

        def PhysxPhysicsJointInstancer "TablejointInstancer2"
        {
            int[] physics:body0Indices = [0]
            rel physics:body0s = </vechicle/Table/tableLeg1Actor>
            int[] physics:body1Indices = [0]
            prepend rel physics:body1s = </vechicle/Table/tableTopActor>
            point3f[] physics:localPos0s = [(0, 0, 100)]
            point3f[] physics:localPos1s = [(100, -50, -0.5)]
            quath[] physics:localRot0s = [(1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0)]
            int[] physics:protoIndices = [0]
            prepend rel physics:prototypes = </vechicle/Rope0/ropeTableAttachment/fixedJoint>

            def PhysicsFixedJoint "fixedJoint"
            {
            }
        }

        def PhysxPhysicsJointInstancer "TablejointInstancer3"
        {
            int[] physics:body0Indices = [0]
            rel physics:body0s = </vechicle/Table/tableLeg1Actor>
            int[] physics:body1Indices = [0]
            prepend rel physics:body1s = </vechicle/Table/tableTopActor>
            point3f[] physics:localPos0s = [(0, 0, 100)]
            point3f[] physics:localPos1s = [(100, 50, -0.5)]
            quath[] physics:localRot0s = [(1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0)]
            int[] physics:protoIndices = [0]
            prepend rel physics:prototypes = </vechicle/Rope0/ropeTableAttachment/fixedJoint>

            def PhysicsFixedJoint "fixedJoint"
            {
            }
        }
    }

    def Xform "Payload"
    {
        def Cube "payload0" (
            prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
        )
        {
            float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
            rel material:binding:physics = </vechicle/PhysicsMaterial>
            float physics:mass = 50
            token physxCollision:bodyType = "static"
            float physxCollision:contactOffset = 4
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.8, 0, 0)]
            float[] primvars:displayOpacity = [1]
            double size = 1
            float3 xformOp:scale = (8, 8, 8)
            double3 xformOp:translate = (0, 0, 124)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
        }
    }

    def Xform "Rope0"
    {
        def PointInstancer "rigidBodyInstancer" (
            instanceable = false
        )
        {
            vector3f[] angularVelocities = []
            quath[] orientations = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
            point3f[] positions = [(0, 0, 196), (0, 0, 188), (0, 0, 180), (0, 0, 172), (0, 0, 164), (0, 0, 156), (0, 0, 148), (0, 0, 140), (0, 0, 132)]
            int[] protoIndices = [0, 0, 0, 0, 0, 0, 0, 0, 0]
            rel prototypes = </vechicle/Rope0/rigidBodyInstancer/capsule>
            vector3f[] velocities = []
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Capsule "capsule" (
                prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI"]
                instanceable = false
            )
            {
                uniform token axis = "Z"
                double height = 6
                rel material:binding:physics = </vechicle/PhysicsMaterial>
                float physics:density = 0.1
                float physxCollision:contactOffset = 2
                float physxCollision:restOffset = 0
                color3f[] primvars:displayColor = [(0.12, 0.24, 1)]
                double radius = 1
            }
        }

        def PhysxPhysicsJointInstancer "jointInstancer"
        {
            int[] physics:body0Indices = [0, 1, 2, 3, 4, 5, 6, 7]
            rel physics:body0s = </vechicle/Rope0/rigidBodyInstancer>
            int[] physics:body1Indices = [1, 2, 3, 4, 5, 6, 7, 8]
            rel physics:body1s = </vechicle/Rope0/rigidBodyInstancer>
            point3f[] physics:localPos0s = [(0, 0, -4), (0, 0, -4), (0, 0, -4), (0, 0, -4), (0, 0, -4), (0, 0, -4), (0, 0, -4), (0, 0, -4)]
            point3f[] physics:localPos1s = [(0, 0, 4), (0, 0, 4), (0, 0, 4), (0, 0, 4), (0, 0, 4), (0, 0, 4), (0, 0, 4), (0, 0, 4)]
            quath[] physics:localRot0s = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0), (1, 0, 0, 0)]
            int[] physics:protoIndices = [0, 0, 0, 0, 0, 0, 0, 0]
            prepend rel physics:prototypes = </vechicle/Rope0/jointInstancer/chainJoint>

            def PhysicsJoint "chainJoint" (
                prepend apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsDriveAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotX"]
            )
            {
                float drive:rotX:physics:damping = 1
                float drive:rotX:physics:stiffness = 0.1
                uniform token drive:rotX:physics:type = "force"
                float drive:rotY:physics:damping = 1
                float drive:rotY:physics:stiffness = 0.1
                uniform token drive:rotY:physics:type = "force"
                float drive:transZ:physics:damping = 10000
                float drive:transZ:physics:stiffness = 1000000
                uniform token drive:transZ:physics:type = "force"
                float limit:rotX:physics:high = 110
                float limit:rotX:physics:low = -110
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = -110
                float limit:rotZ:physics:low = 110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = 1
                float limit:transZ:physics:low = -1
            }
        }

        def PhysxPhysicsJointInstancer "PayloadjointInstancer"
        {
            int[] physics:body0Indices = [0]
            rel physics:body0s = </vechicle/Payload/payload0>
            int[] physics:body1Indices = [8]
            rel physics:body1s = </vechicle/Rope0/rigidBodyInstancer>
            point3f[] physics:localPos0s = [(0, 0, 4)]
            point3f[] physics:localPos1s = [(0, 0, -4)]
            quath[] physics:localRot0s = [(1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0)]
            int[] physics:protoIndices = [0]
            prepend rel physics:prototypes = </vechicle/Rope0/PayloadjointInstancer/payloadJoint>

            def PhysicsJoint "payloadJoint" (
                prepend apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsLimitAPI:rotZ"]
            )
            {
                float limit:rotX:physics:high = 110
                float limit:rotX:physics:low = -110
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = -110
                float limit:rotZ:physics:low = 110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
            }
        }

        def PhysxPhysicsJointInstancer "ropeTableAttachment"
        {
            int[] physics:body0Indices = [0]
            rel physics:body0s = </vechicle/Rope0/rigidBodyInstancer>
            int[] physics:body1Indices = [0]
            prepend rel physics:body1s = </vechicle/Table/tableTopActor>
            point3f[] physics:localPos0s = [(0, 0, 4)]
            point3f[] physics:localPos1s = [(0, 0, -0.5)]
            quath[] physics:localRot0s = [(1, 0, 0, 0)]
            quath[] physics:localRot1s = [(1, 0, 0, 0)]
            int[] physics:protoIndices = [0]
            prepend rel physics:prototypes = </vechicle/Rope0/ropeTableAttachment/attachJoint>

            def PhysicsJoint "attachJoint" (
                prepend apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
            }
        }
    }
}

