// Generated by gencpp from file gestelt_msgs/Goals.msg
// DO NOT EDIT!


#ifndef GESTELT_MSGS_MESSAGE_GOALS_H
#define GESTELT_MSGS_MESSAGE_GOALS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Accel.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>

namespace gestelt_msgs
{
template <class ContainerAllocator>
struct Goals_
{
  typedef Goals_<ContainerAllocator> Type;

  Goals_()
    : header()
    , waypoints()
    , velocities()
    , accelerations()
    , velocities_mask()
    , accelerations_mask()
    , time_factor_terminal()
    , time_factor()
    , max_vel()
    , max_acc()  {
    }
  Goals_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , waypoints(_alloc)
    , velocities(_alloc)
    , accelerations(_alloc)
    , velocities_mask(_alloc)
    , accelerations_mask(_alloc)
    , time_factor_terminal(_alloc)
    , time_factor(_alloc)
    , max_vel(_alloc)
    , max_acc(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _waypoints_type;
  _waypoints_type waypoints;

   typedef std::vector< ::geometry_msgs::Twist_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Twist_<ContainerAllocator> >> _velocities_type;
  _velocities_type velocities;

   typedef std::vector< ::geometry_msgs::Accel_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Accel_<ContainerAllocator> >> _accelerations_type;
  _accelerations_type accelerations;

   typedef std::vector< ::std_msgs::Bool_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Bool_<ContainerAllocator> >> _velocities_mask_type;
  _velocities_mask_type velocities_mask;

   typedef std::vector< ::std_msgs::Bool_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::Bool_<ContainerAllocator> >> _accelerations_mask_type;
  _accelerations_mask_type accelerations_mask;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _time_factor_terminal_type;
  _time_factor_terminal_type time_factor_terminal;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _time_factor_type;
  _time_factor_type time_factor;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _max_vel_type;
  _max_vel_type max_vel;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _max_acc_type;
  _max_acc_type max_acc;





  typedef boost::shared_ptr< ::gestelt_msgs::Goals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gestelt_msgs::Goals_<ContainerAllocator> const> ConstPtr;

}; // struct Goals_

typedef ::gestelt_msgs::Goals_<std::allocator<void> > Goals;

typedef boost::shared_ptr< ::gestelt_msgs::Goals > GoalsPtr;
typedef boost::shared_ptr< ::gestelt_msgs::Goals const> GoalsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gestelt_msgs::Goals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gestelt_msgs::Goals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gestelt_msgs::Goals_<ContainerAllocator1> & lhs, const ::gestelt_msgs::Goals_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.waypoints == rhs.waypoints &&
    lhs.velocities == rhs.velocities &&
    lhs.accelerations == rhs.accelerations &&
    lhs.velocities_mask == rhs.velocities_mask &&
    lhs.accelerations_mask == rhs.accelerations_mask &&
    lhs.time_factor_terminal == rhs.time_factor_terminal &&
    lhs.time_factor == rhs.time_factor &&
    lhs.max_vel == rhs.max_vel &&
    lhs.max_acc == rhs.max_acc;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gestelt_msgs::Goals_<ContainerAllocator1> & lhs, const ::gestelt_msgs::Goals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gestelt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gestelt_msgs::Goals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gestelt_msgs::Goals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gestelt_msgs::Goals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gestelt_msgs::Goals_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gestelt_msgs::Goals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gestelt_msgs::Goals_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gestelt_msgs::Goals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "177ff0121ddb3a9dfb30d4b1b6d4fd32";
  }

  static const char* value(const ::gestelt_msgs::Goals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x177ff0121ddb3a9dULL;
  static const uint64_t static_value2 = 0xfb30d4b1b6d4fd32ULL;
};

template<class ContainerAllocator>
struct DataType< ::gestelt_msgs::Goals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gestelt_msgs/Goals";
  }

  static const char* value(const ::gestelt_msgs::Goals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gestelt_msgs::Goals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Goal waypoints\n"
"geometry_msgs/Pose[] waypoints\n"
"geometry_msgs/Twist[] velocities\n"
"geometry_msgs/Accel[] accelerations\n"
"\n"
"std_msgs/Bool[] velocities_mask  # 0 means use the value, 1 means ignore the value\n"
"std_msgs/Bool[] accelerations_mask # 0 means use the value, 1 means ignore the value\n"
"\n"
"std_msgs/Float32 time_factor_terminal\n"
"std_msgs/Float32 time_factor\n"
"std_msgs/Float32 max_vel\n"
"std_msgs/Float32 max_acc\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Accel\n"
"# This expresses acceleration in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::gestelt_msgs::Goals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gestelt_msgs::Goals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.waypoints);
      stream.next(m.velocities);
      stream.next(m.accelerations);
      stream.next(m.velocities_mask);
      stream.next(m.accelerations_mask);
      stream.next(m.time_factor_terminal);
      stream.next(m.time_factor);
      stream.next(m.max_vel);
      stream.next(m.max_acc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gestelt_msgs::Goals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gestelt_msgs::Goals_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.velocities[i]);
    }
    s << indent << "accelerations[]" << std::endl;
    for (size_t i = 0; i < v.accelerations.size(); ++i)
    {
      s << indent << "  accelerations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Accel_<ContainerAllocator> >::stream(s, indent + "    ", v.accelerations[i]);
    }
    s << indent << "velocities_mask[]" << std::endl;
    for (size_t i = 0; i < v.velocities_mask.size(); ++i)
    {
      s << indent << "  velocities_mask[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "    ", v.velocities_mask[i]);
    }
    s << indent << "accelerations_mask[]" << std::endl;
    for (size_t i = 0; i < v.accelerations_mask.size(); ++i)
    {
      s << indent << "  accelerations_mask[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "    ", v.accelerations_mask[i]);
    }
    s << indent << "time_factor_terminal: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.time_factor_terminal);
    s << indent << "time_factor: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.time_factor);
    s << indent << "max_vel: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.max_vel);
    s << indent << "max_acc: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.max_acc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GESTELT_MSGS_MESSAGE_GOALS_H
