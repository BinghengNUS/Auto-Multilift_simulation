// Generated by gencpp from file gestelt_msgs/CommanderCommand.msg
// DO NOT EDIT!


#ifndef GESTELT_MSGS_MESSAGE_COMMANDERCOMMAND_H
#define GESTELT_MSGS_MESSAGE_COMMANDERCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace gestelt_msgs
{
template <class ContainerAllocator>
struct CommanderCommand_
{
  typedef CommanderCommand_<ContainerAllocator> Type;

  CommanderCommand_()
    : header()
    , command(0)  {
    }
  CommanderCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _command_type;
  _command_type command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TAKEOFF)
  #undef TAKEOFF
#endif
#if defined(_WIN32) && defined(LAND)
  #undef LAND
#endif
#if defined(_WIN32) && defined(MISSION)
  #undef MISSION
#endif
#if defined(_WIN32) && defined(HOVER)
  #undef HOVER
#endif
#if defined(_WIN32) && defined(E_STOP)
  #undef E_STOP
#endif
#if defined(_WIN32) && defined(EMPTY)
  #undef EMPTY
#endif

  enum {
    TAKEOFF = 0u,
    LAND = 1u,
    MISSION = 2u,
    HOVER = 3u,
    E_STOP = 4u,
    EMPTY = 5u,
  };


  typedef boost::shared_ptr< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> const> ConstPtr;

}; // struct CommanderCommand_

typedef ::gestelt_msgs::CommanderCommand_<std::allocator<void> > CommanderCommand;

typedef boost::shared_ptr< ::gestelt_msgs::CommanderCommand > CommanderCommandPtr;
typedef boost::shared_ptr< ::gestelt_msgs::CommanderCommand const> CommanderCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gestelt_msgs::CommanderCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gestelt_msgs::CommanderCommand_<ContainerAllocator1> & lhs, const ::gestelt_msgs::CommanderCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gestelt_msgs::CommanderCommand_<ContainerAllocator1> & lhs, const ::gestelt_msgs::CommanderCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gestelt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2b5cea46d5563515ff555ff17901255";
  }

  static const char* value(const ::gestelt_msgs::CommanderCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2b5cea46d556351ULL;
  static const uint64_t static_value2 = 0x5ff555ff17901255ULL;
};

template<class ContainerAllocator>
struct DataType< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gestelt_msgs/CommanderCommand";
  }

  static const char* value(const ::gestelt_msgs::CommanderCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Command sent to server \n"
"uint16 command\n"
"uint16 TAKEOFF = 0\n"
"uint16 LAND = 1\n"
"uint16 MISSION = 2\n"
"uint16 HOVER = 3\n"
"uint16 E_STOP = 4\n"
"uint16 EMPTY = 5\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::gestelt_msgs::CommanderCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommanderCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gestelt_msgs::CommanderCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gestelt_msgs::CommanderCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GESTELT_MSGS_MESSAGE_COMMANDERCOMMAND_H
