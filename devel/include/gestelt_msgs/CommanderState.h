// Generated by gencpp from file gestelt_msgs/CommanderState.msg
// DO NOT EDIT!


#ifndef GESTELT_MSGS_MESSAGE_COMMANDERSTATE_H
#define GESTELT_MSGS_MESSAGE_COMMANDERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gestelt_msgs
{
template <class ContainerAllocator>
struct CommanderState_
{
  typedef CommanderState_<ContainerAllocator> Type;

  CommanderState_()
    : drone_id(0)
    , traj_server_state()
    , planner_server_state()
    , uav_state()
    , armed(false)  {
    }
  CommanderState_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , traj_server_state(_alloc)
    , planner_server_state(_alloc)
    , uav_state(_alloc)
    , armed(false)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _traj_server_state_type;
  _traj_server_state_type traj_server_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _planner_server_state_type;
  _planner_server_state_type planner_server_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uav_state_type;
  _uav_state_type uav_state;

   typedef uint8_t _armed_type;
  _armed_type armed;





  typedef boost::shared_ptr< ::gestelt_msgs::CommanderState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gestelt_msgs::CommanderState_<ContainerAllocator> const> ConstPtr;

}; // struct CommanderState_

typedef ::gestelt_msgs::CommanderState_<std::allocator<void> > CommanderState;

typedef boost::shared_ptr< ::gestelt_msgs::CommanderState > CommanderStatePtr;
typedef boost::shared_ptr< ::gestelt_msgs::CommanderState const> CommanderStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gestelt_msgs::CommanderState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gestelt_msgs::CommanderState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gestelt_msgs::CommanderState_<ContainerAllocator1> & lhs, const ::gestelt_msgs::CommanderState_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.traj_server_state == rhs.traj_server_state &&
    lhs.planner_server_state == rhs.planner_server_state &&
    lhs.uav_state == rhs.uav_state &&
    lhs.armed == rhs.armed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gestelt_msgs::CommanderState_<ContainerAllocator1> & lhs, const ::gestelt_msgs::CommanderState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gestelt_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gestelt_msgs::CommanderState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gestelt_msgs::CommanderState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gestelt_msgs::CommanderState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2808123e870beb3f216ec9c58781e6e";
  }

  static const char* value(const ::gestelt_msgs::CommanderState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2808123e870beb3ULL;
  static const uint64_t static_value2 = 0xf216ec9c58781e6eULL;
};

template<class ContainerAllocator>
struct DataType< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gestelt_msgs/CommanderState";
  }

  static const char* value(const ::gestelt_msgs::CommanderState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 drone_id\n"
"string traj_server_state\n"
"string planner_server_state\n"
"string uav_state\n"
"bool armed\n"
;
  }

  static const char* value(const ::gestelt_msgs::CommanderState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.traj_server_state);
      stream.next(m.planner_server_state);
      stream.next(m.uav_state);
      stream.next(m.armed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommanderState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gestelt_msgs::CommanderState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gestelt_msgs::CommanderState_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "traj_server_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.traj_server_state);
    s << indent << "planner_server_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.planner_server_state);
    s << indent << "uav_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_state);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GESTELT_MSGS_MESSAGE_COMMANDERSTATE_H
